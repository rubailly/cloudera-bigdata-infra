---
- name: Install Cloudera Manager
  hosts: cloudera_manager
  become: yes
  tasks:
    - name: Add Cloudera repository
      get_url:
        url: https://archive.cloudera.com/cm7/7.4.4/ubuntu2004/apt/cloudera-manager.list
        dest: /etc/apt/sources.list.d/cloudera-manager.list
        mode: '0644'
      when: ansible_distribution == "Ubuntu"

    - name: Add Cloudera GPG key
      apt_key:
        url: https://archive.cloudera.com/cm7/7.4.4/ubuntu2004/apt/archive.key
        state: present
      when: ansible_distribution == "Ubuntu"

    - name: Update apt cache
      apt:
        update_cache: yes
      when: ansible_distribution == "Ubuntu"

    - name: Install Cloudera Manager Server
      apt:
        name:
          - cloudera-manager-daemons
          - cloudera-manager-agent
          - cloudera-manager-server
        state: present
      when: ansible_distribution == "Ubuntu"

    - name: Install MariaDB for metadata
      apt:
        name:
          - mariadb-server
          - libmariadb-dev
        state: present
      when: ansible_distribution == "Ubuntu"

    - name: Start and enable MariaDB
      service:
        name: mariadb
        state: started
        enabled: yes

    - name: Secure MariaDB installation
      shell: |
        mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '{{ cm_admin_password }}';"
        mysql -u root -p"{{ cm_admin_password }}" -e "DELETE FROM mysql.user WHERE User='';"
        mysql -u root -p"{{ cm_admin_password }}" -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');"
        mysql -u root -p"{{ cm_admin_password }}" -e "DROP DATABASE IF EXISTS test;"
        mysql -u root -p"{{ cm_admin_password }}" -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';"
        mysql -u root -p"{{ cm_admin_password }}" -e "FLUSH PRIVILEGES;"
      register: mariadb_secure
      failed_when: mariadb_secure.rc != 0 and "Access denied" not in mariadb_secure.stderr

    - name: Create databases for Cloudera services
      shell: >
        mysql -u root -p"{{ cm_admin_password }}" -e "
        CREATE DATABASE IF NOT EXISTS scm DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
        CREATE DATABASE IF NOT EXISTS amon DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
        CREATE DATABASE IF NOT EXISTS rman DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
        CREATE DATABASE IF NOT EXISTS hue DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
        CREATE DATABASE IF NOT EXISTS metastore DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
        CREATE DATABASE IF NOT EXISTS sentry DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
        CREATE DATABASE IF NOT EXISTS nav DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
        CREATE DATABASE IF NOT EXISTS navms DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
        CREATE DATABASE IF NOT EXISTS oozie DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
        CREATE USER IF NOT EXISTS 'scm'@'%' IDENTIFIED BY 'scm';
        CREATE USER IF NOT EXISTS 'amon'@'%' IDENTIFIED BY 'amon';
        CREATE USER IF NOT EXISTS 'rman'@'%' IDENTIFIED BY 'rman';
        CREATE USER IF NOT EXISTS 'hue'@'%' IDENTIFIED BY 'hue';
        CREATE USER IF NOT EXISTS 'hive'@'%' IDENTIFIED BY 'hive';
        CREATE USER IF NOT EXISTS 'sentry'@'%' IDENTIFIED BY 'sentry';
        CREATE USER IF NOT EXISTS 'nav'@'%' IDENTIFIED BY 'nav';
        CREATE USER IF NOT EXISTS 'navms'@'%' IDENTIFIED BY 'navms';
        CREATE USER IF NOT EXISTS 'oozie'@'%' IDENTIFIED BY 'oozie';
        GRANT ALL ON scm.* TO 'scm'@'%';
        GRANT ALL ON amon.* TO 'amon'@'%';
        GRANT ALL ON rman.* TO 'rman'@'%';
        GRANT ALL ON hue.* TO 'hue'@'%';
        GRANT ALL ON metastore.* TO 'hive'@'%';
        GRANT ALL ON sentry.* TO 'sentry'@'%';
        GRANT ALL ON nav.* TO 'nav'@'%';
        GRANT ALL ON navms.* TO 'navms'@'%';
        GRANT ALL ON oozie.* TO 'oozie'@'%';
        FLUSH PRIVILEGES;"
      ignore_errors: yes

    - name: Initialize Cloudera SCM database
      command: /opt/cloudera/cm/schema/scm_prepare_database.sh mysql scm scm scm
      ignore_errors: yes

    - name: Generate self-signed certificate for Cloudera Manager
      command: >
        openssl req -new -x509 -newkey rsa:2048 -nodes
        -keyout /opt/cloudera/security/pem/server.key
        -out /opt/cloudera/security/pem/server.crt
        -subj "/CN={{ master_hostname }}"
        -days 3650
      args:
        creates: /opt/cloudera/security/pem/server.crt
      
    - name: Create directory for certificates
      file:
        path: /opt/cloudera/security/pem
        state: directory
        mode: '0755'
        
    - name: Configure Cloudera Manager to use TLS
      lineinfile:
        path: /etc/default/cloudera-scm-server
        line: "export CMF_SERVER_TLS=true"
        create: yes
        
    - name: Start Cloudera Manager Server
      service:
        name: cloudera-scm-server
        state: started
        enabled: yes

- name: Install Cloudera Agents on all nodes
  hosts: all
  become: yes
  tasks:
    - name: Add Cloudera repository
      get_url:
        url: https://archive.cloudera.com/cm7/7.4.4/ubuntu2004/apt/cloudera-manager.list
        dest: /etc/apt/sources.list.d/cloudera-manager.list
        mode: '0644'
      when: ansible_distribution == "Ubuntu"

    - name: Add Cloudera GPG key
      apt_key:
        url: https://archive.cloudera.com/cm7/7.4.4/ubuntu2004/apt/archive.key
        state: present
      when: ansible_distribution == "Ubuntu"

    - name: Update apt cache
      apt:
        update_cache: yes
      when: ansible_distribution == "Ubuntu"

    - name: Install Cloudera Manager Agent
      apt:
        name: cloudera-manager-agent
        state: present
      when: ansible_distribution == "Ubuntu"

    - name: Configure CM agent to point to CM server
      lineinfile:
        path: /etc/cloudera-scm-agent/config.ini
        regexp: '^server_host='
        line: 'server_host={{ master_hostname }}'
        
    - name: Start Cloudera Manager Agent
      service:
        name: cloudera-scm-agent
        state: started
        enabled: yes
